{"version":3,"sources":["Component/DataDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["DataDisplay","useState","stateData","setStateData","getCovidData","a","fetch","res","json","statewise","console","log","useEffect","className","length","map","creValue","index","state","confirmed","recovered","deaths","active","lastupdatedtime","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAsEeA,EAnEK,WAClB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,uCAAG,gCAAAC,EAAA,+EAECC,MAAM,2CAFP,cAEXC,EAFW,gBAGWA,EAAIC,OAHf,gBAGTC,EAHS,EAGTA,UACRN,EAAaM,GAJI,kDAMjBC,QAAQC,IAAR,MANiB,0DAAH,qDAiBlB,OAPAC,qBAAU,WAGR,OAFAR,IAEO,WACLD,EAAa,OAEd,IAED,qCACE,qBAAKU,UAAU,YACf,sBAAKA,UAAU,aAAf,UACE,wCACQ,sBAAMA,UAAU,cAAhB,gBADR,0BAIA,oBAAIA,UAAU,WAEhB,qBAAKA,UAAU,yBAAf,SACE,wBAAOA,UAAU,qBAAjB,UACE,uBAAOA,UAAU,wCAAjB,SACE,qBAAIA,UAAU,oCAAd,UACE,uCACA,2CACA,2CACA,wCACA,wCACA,8CAGJ,gCACGX,EAAUY,QAAS,EAClBZ,EAAUa,KAAI,SAACC,EAAUC,GACvB,OACE,mCACE,qBAAgBJ,UAAU,YAA1B,UACE,oBAAIA,UAAU,aAAd,SAA4BG,EAASE,QACrC,oBAAIL,UAAU,aAAd,SAA4BG,EAASG,YACrC,qBAAIN,UAAU,aAAd,UAA4BG,EAASI,UAArC,OACA,qBAAIP,UAAU,WAAd,cAA2BG,EAASK,OAApC,OACA,oBAAIR,UAAU,aAAd,SAA4BG,EAASM,SACrC,oBAAIT,UAAU,aAAd,SAA4BG,EAASO,oBAN9BN,QAYf,mBAAGJ,UAAU,mBAAb,sCCnDCW,MARf,WACE,OACC,mCACA,cAAC,EAAD,OCMYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea9f10cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./DataDisplay.css\";\r\n\r\nconst DataDisplay = () => {\r\n  const [stateData, setStateData] = useState([]);\r\n\r\n  const getCovidData = async () => {\r\n    try {\r\n      const res = await fetch(\"https://data.covid19india.org/data.json\");\r\n      const { statewise } = await res.json();\r\n      setStateData(statewise);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCovidData();\r\n\r\n    return () => {\r\n      setStateData([]);\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"mainDiv\"></div>\r\n      <div className=\"headingDiv\">\r\n        <h1>\r\n          COVID-<span className=\"text-danger\">19</span> Live data Statewise\r\n        </h1>\r\n\r\n        <hr className=\"hrS\" />\r\n      </div>\r\n      <div className=\"container table-border\">\r\n        <table className=\"table table-hover \">\r\n          <thead className=\"table-dark text-align-center position\">\r\n            <tr className=\"text-align-center text-capitalize\">\r\n              <th>state</th>\r\n              <th>confirmed</th>\r\n              <th>recovered</th>\r\n              <th>deaths</th>\r\n              <th>active</th>\r\n              <th>Updated</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {stateData.length >=1 ? (\r\n              stateData.map((creValue, index) => {\r\n                return (\r\n                  <>\r\n                    <tr key={index} className=\"tableData\">\r\n                      <td className=\"greenHover\">{creValue.state}</td>\r\n                      <td className=\"greenHover\">{creValue.confirmed}</td>\r\n                      <td className=\"greenHover\">{creValue.recovered} </td>\r\n                      <td className=\"redHover\"> {creValue.deaths} </td>\r\n                      <td className=\"greenHover\">{creValue.active}</td>\r\n                      <td className=\"greenHover\">{creValue.lastupdatedtime}</td>\r\n                    </tr>\r\n                  </>\r\n                );\r\n              })\r\n            ):(\r\n              <p className=\"text-danger pera\">no data found</p>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default DataDisplay;\r\n","import react from 'react';\nimport './App.css';\nimport DataDisplay from './Component/DataDisplay';\nfunction App() {\n  return (\n   <>\n   <DataDisplay/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}